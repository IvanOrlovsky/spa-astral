name: CI/CD for SPA-ASTRAL

on:
    push:
        branches:
            - main

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_PASSWORD }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: true
                  tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest
                  no-cache: true
                  build-args: |
                      REACT_APP_LOGIN=${{ secrets.REACT_APP_LOGIN }}
                      REACT_APP_PASSWORD=${{ secrets.REACT_APP_PASSWORD }}
                      REACT_APP_LOGIN_API=${{ secrets.REACT_APP_LOGIN_API }}
                      REACT_APP_ACCESS_TOKEN=${{ secrets.REACT_APP_ACCESS_TOKEN }}
                      REACT_APP_CARDS_API=${{ secrets.REACT_APP_CARDS_API }}
                      REACT_APP_GET_USER_API=${{ secrets.REACT_APP_GET_USER_API }}
                      REACT_APP_SET_USER_API=${{ secrets.REACT_APP_SET_USER_API }}

    deploy:
        needs: build-and-push
        runs-on: ubuntu-latest
        steps:
            - name: Get Portainer auth token
              id: get_token
              run: |
                  response=$(curl -s -X POST "${{ secrets.PORTAINER_HOST }}/api/auth" \
                    -H "Content-Type: application/json" \
                    -d '{"username": "${{ secrets.PORTAINER_USERNAME }}", "password": "${{ secrets.PORTAINER_PASSWORD }}"}')
                  token=$(echo $response | jq -r '.jwt')
                  if [ -z "$token" ] || [ "$token" == "null" ]; then
                    echo "Failed to get auth token"
                    exit 1
                  fi
                  echo "token=$token" >> $GITHUB_OUTPUT

            - name: Get Portainer endpoint ID
              id: get_endpoint
              run: |
                  endpoint_response=$(curl -s -X GET "${{ secrets.PORTAINER_HOST }}/api/endpoints" \
                    -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}")
                  endpoint_id=$(echo $endpoint_response | jq -r '.[0].Id')
                  if [ -z "$endpoint_id" ] || [ "$endpoint_id" == "null" ]; then
                    echo "Failed to get endpoint ID"
                    exit 1
                  fi
                  echo "endpoint_id=$endpoint_id" >> $GITHUB_OUTPUT

            - name: Get existing stack ID
              id: get_stack_id
              run: |
                  existing_stack_response=$(curl -s -X GET "${{ secrets.PORTAINER_HOST }}/api/stacks" \
                    -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}")
                  stack_id=$(echo $existing_stack_response | jq -r '.[] | select(.Name=="spa-astral") | .Id')
                  if [ -z "$stack_id" ]; then
                    echo "Stack not found"
                    exit 1
                  fi
                  echo "stack_id=$stack_id" >> $GITHUB_OUTPUT

            - name: Stop and remove existing container
              run: |
                  containers=$(curl -s -X GET "${{ secrets.PORTAINER_HOST }}/api/endpoints/${{ steps.get_endpoint.outputs.endpoint_id }}/docker/containers/json" \
                    -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}")

                  container_id=$(echo $containers | jq -r '.[] | select(.Image | contains("${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}")) | .Id')

                  if [ -n "$container_id" ]; then
                    echo "Stopping container: $container_id"
                    curl -X POST "${{ secrets.PORTAINER_HOST }}/api/endpoints/${{ steps.get_endpoint.outputs.endpoint_id }}/docker/containers/$container_id/stop" \
                      -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}"
                    
                    echo "Removing container: $container_id"
                    curl -X DELETE "${{ secrets.PORTAINER_HOST }}/api/endpoints/${{ steps.get_endpoint.outputs.endpoint_id }}/docker/containers/$container_id" \
                      -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}"
                  else
                    echo "No existing container found."
                  fi

            - name: Remove old image
              run: |
                  image_name="${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest"
                  old_image_id=$(curl -s -X GET "${{ secrets.PORTAINER_HOST }}/api/endpoints/${{ steps.get_endpoint.outputs.endpoint_id }}/docker/images/json" \
                    -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}" | \
                    jq -r --arg NAME "$image_name" '.[] | select(.RepoTags[] | contains($NAME)) | .Id')

                  if [ -n "$old_image_id" ]; then
                    echo "Removing old image: $old_image_id"
                    curl -X DELETE "${{ secrets.PORTAINER_HOST }}/api/endpoints/${{ steps.get_endpoint.outputs.endpoint_id }}/docker/images/$old_image_id?force=true" \
                      -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}"
                  else
                    echo "No old image found to remove."
                  fi

            - name: Force pull new image
              run: |
                  curl -X POST "${{ secrets.PORTAINER_HOST }}/api/endpoints/${{ steps.get_endpoint.outputs.endpoint_id }}/docker/images/create?fromImage=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest&force=true" \
                    -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}"

            - name: Update stack
              run: |
                  stack_file_content=$(cat << EOF
                  version: '3'
                  services:
                    app:
                      image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest
                      ports:
                        - '8080:80'
                      environment:
                        - REACT_APP_LOGIN=${{ secrets.REACT_APP_LOGIN }}
                        - REACT_APP_PASSWORD=${{ secrets.REACT_APP_PASSWORD }}
                        - REACT_APP_LOGIN_API=${{ secrets.REACT_APP_LOGIN_API }}
                        - REACT_APP_ACCESS_TOKEN=${{ secrets.REACT_APP_ACCESS_TOKEN }}
                        - REACT_APP_CARDS_API=${{ secrets.REACT_APP_CARDS_API }}
                        - REACT_APP_SET_USER_API=${{ secrets.REACT_APP_SET_USER_API }}
                        - REACT_APP_GET_USER_API=${{ secrets.REACT_APP_GET_USER_API }}
                  EOF
                  )

                  curl -X PUT "${{ secrets.PORTAINER_HOST }}/api/stacks/${{ steps.get_stack_id.outputs.stack_id }}?endpointId=${{ steps.get_endpoint.outputs.endpoint_id }}" \
                    -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}" \
                    -H "Content-Type: application/json" \
                    -d '{
                      "stackFileContent": "'"${stack_file_content//$'\n'/\\n}"'",
                      "prune": true,
                      "pullImage": true
                    }'

            - name: Verify deployment
              run: |
                  echo "Waiting for the new container to start..."
                  sleep 5

                  containers=$(curl -s -X GET "${{ secrets.PORTAINER_HOST }}/api/endpoints/${{ steps.get_endpoint.outputs.endpoint_id }}/docker/containers/json" \
                    -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}")

                  new_container_id=$(echo $containers | jq -r '.[] | select(.Image | contains("${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}")) | .Id')

                  if [ -n "$new_container_id" ]; then
                    echo "New container is running with ID: $new_container_id"
                  else
                    echo "Error: New container not found. Deployment may have failed."
                    exit 1
                  fi
